// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nomex.Data;

namespace Nomex.Migrations
{
    [DbContext(typeof(NomexContext))]
    partial class NomexContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Nomex.Models.ActiveSubstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActiveSubstances");
                });

            modelBuilder.Entity("Nomex.Models.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompensated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int?>("UsageTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsageTemplateId");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Barcode = "474127310724",
                            CompanyName = "Takeda Pharma AS",
                            ExpireDate = new DateTime(2031, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompensated = false,
                            Name = "Ibumetin",
                            Price = 2.2f,
                            UsageTemplateId = 1
                        },
                        new
                        {
                            Id = 2,
                            Barcode = "215366",
                            CompanyName = "BERLIN-CHEMIE AG",
                            ExpireDate = new DateTime(2031, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompensated = false,
                            Name = "Mezym 20000 V",
                            Price = 6.29f,
                            UsageTemplateId = 2
                        },
                        new
                        {
                            Id = 3,
                            Barcode = "502126522103",
                            CompanyName = "Vitabiotics LTD",
                            ExpireDate = new DateTime(2031, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompensated = false,
                            Name = "CARDIOACE",
                            Price = 16.99f,
                            UsageTemplateId = 4
                        },
                        new
                        {
                            Id = 4,
                            Barcode = "676194965199",
                            CompanyName = "SIROMED PHARMA",
                            ExpireDate = new DateTime(2031, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompensated = false,
                            Name = "VITAMINAS C PRO-LONG",
                            Price = 7.27f,
                            UsageTemplateId = 3
                        },
                        new
                        {
                            Id = 5,
                            Barcode = "477131630740",
                            CompanyName = "SIROMED PHARMA",
                            ExpireDate = new DateTime(2031, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompensated = false,
                            Name = "LIVE WELL GINKGO PLUS",
                            Price = 7.99f,
                            UsageTemplateId = 2
                        });
                });

            modelBuilder.Entity("Nomex.Models.MedicineActiveSubstance", b =>
                {
                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("ActiveSubstanceId")
                        .HasColumnType("int");

                    b.HasKey("MedicineId", "ActiveSubstanceId");

                    b.HasIndex("ActiveSubstanceId");

                    b.ToTable("MedicineActiveSubstances");
                });

            modelBuilder.Entity("Nomex.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int?>("UsageId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("UsageId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MedicineId = 1,
                            UsageId = 1,
                            UserId = 1,
                            ValidUntil = new DateTime(2021, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            MedicineId = 2,
                            UsageId = 2,
                            UserId = 1,
                            ValidUntil = new DateTime(2021, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            MedicineId = 3,
                            UsageId = 2,
                            UserId = 2,
                            ValidUntil = new DateTime(2021, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            MedicineId = 1,
                            UsageId = 3,
                            UserId = 3,
                            ValidUntil = new DateTime(2021, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Nomex.Models.Usage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dosage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Usages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Aprašymas vienas",
                            Dosage = 0
                        },
                        new
                        {
                            Id = 2,
                            Description = "Aprašymas du",
                            Dosage = 0
                        },
                        new
                        {
                            Id = 3,
                            Description = "Aprašymas trys",
                            Dosage = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Aprašymas keturi",
                            Dosage = 2
                        });
                });

            modelBuilder.Entity("Nomex.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonalDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonalDetailsId")
                        .IsUnique()
                        .HasFilter("[PersonalDetailsId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "vienas@gmail.com",
                            Password = "132456",
                            Salt = "geras"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ddu@gmail.com",
                            Password = "nesakysiu",
                            Salt = "geresnis"
                        },
                        new
                        {
                            Id = 3,
                            Email = "trys@gmail.com",
                            Password = "kaunas",
                            Salt = "geriausias"
                        });
                });

            modelBuilder.Entity("Nomex.Models.UserPersonal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserPersonals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1999, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mantas",
                            PersonalCode = "191899",
                            Surname = "Pabalys"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(2000, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Arminas",
                            PersonalCode = "6869869",
                            Surname = "Vilunas"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(2000, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Marius",
                            PersonalCode = "49844",
                            Surname = "Gindriunas"
                        });
                });

            modelBuilder.Entity("Nomex.Models.Medicine", b =>
                {
                    b.HasOne("Nomex.Models.Usage", "UsageTemplate")
                        .WithMany()
                        .HasForeignKey("UsageTemplateId");

                    b.Navigation("UsageTemplate");
                });

            modelBuilder.Entity("Nomex.Models.MedicineActiveSubstance", b =>
                {
                    b.HasOne("Nomex.Models.ActiveSubstance", "ActiveSubstance")
                        .WithMany("Medicines")
                        .HasForeignKey("ActiveSubstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nomex.Models.Medicine", "Medicine")
                        .WithMany("ActiveSubstances")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveSubstance");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Nomex.Models.Recipe", b =>
                {
                    b.HasOne("Nomex.Models.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId");

                    b.HasOne("Nomex.Models.Usage", "Usage")
                        .WithMany()
                        .HasForeignKey("UsageId");

                    b.HasOne("Nomex.Models.User", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId");

                    b.Navigation("Medicine");

                    b.Navigation("Usage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nomex.Models.User", b =>
                {
                    b.HasOne("Nomex.Models.UserPersonal", "PersonalDetails")
                        .WithOne("User")
                        .HasForeignKey("Nomex.Models.User", "PersonalDetailsId");

                    b.Navigation("PersonalDetails");
                });

            modelBuilder.Entity("Nomex.Models.ActiveSubstance", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("Nomex.Models.Medicine", b =>
                {
                    b.Navigation("ActiveSubstances");
                });

            modelBuilder.Entity("Nomex.Models.User", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Nomex.Models.UserPersonal", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
